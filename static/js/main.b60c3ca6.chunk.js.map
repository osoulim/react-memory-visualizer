{"version":3,"sources":["Ram.js","App.js","serviceWorker.js","index.js"],"names":["pallete","Ram","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","type","memory","processNum","lastFit","memsize","endProcess","label","addFirstFit","bind","assertThisInitialized","addBestFit","addWorstFit","addNextFit","finishProcess","handleChange","handleSelectChange","target","_ref","setState","parseInt","value","_ref2","tmp","i","length","splice","cleanRam","putIndex","putSize","Infinity","console","log","react_default","a","createElement","onChange","onClick","filter","item","map","index","key","_this2","style","width","borderColor","borderStyle","borderWidth","padding","margin","renderControlPanel","es","stackBy","xDomain","yDomain","height","onValueMouseOver","point","event","extra","color","cluster","x","y","Component","App","memorySize","memoryField","createRam","marginTop","className","src_Ram","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b60c3ca6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, HorizontalBarSeries, VerticalGridLines, XAxis} from 'react-vis';\r\n\r\nconst pallete=['#776E57', '#12939A', '#17B8BE', '#F6D18A', '#B7885E', '#FFCB99', '#F89570', '#829AE3', '#E79FD5', '#1E96BE', '#89DAC1', '#B3AD9E'];\r\n\r\nclass Ram extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            data : [{type : 0, memory: props.memory}],\r\n            processNum: 1,\r\n            lastFit: 0,\r\n            memsize: 0,\r\n            endProcess: -1,\r\n            label: {type : 0, memory: props.memory},\r\n        }\r\n        this.addFirstFit = this.addFirstFit.bind(this);\r\n        this.addBestFit = this.addBestFit.bind(this);\r\n        this.addWorstFit = this.addWorstFit.bind(this);\r\n        this.addNextFit = this.addNextFit.bind(this);\r\n        this.finishProcess = this.finishProcess.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSelectChange = this.handleSelectChange.bind(this);\r\n    }\r\n\r\n    handleChange({ target }) {\r\n        this.setState({\r\n          memsize: parseInt(target.value)\r\n        });\r\n    }    \r\n\r\n    handleSelectChange({ target }) {\r\n        this.setState({\r\n            endProcess: parseInt(target.value)\r\n        });\r\n    }    \r\n\r\n    addFirstFit(){\r\n        let tmp = this.state.data, memsize = this.state.memsize;\r\n        if(memsize <= 0)\r\n            return;\r\n        for(var i = 0; i < tmp.length; i++){\r\n            if(tmp[i].type === 0 && tmp[i].memory >= memsize){\r\n                tmp[i].memory -= memsize;\r\n                tmp.splice(i, 0, {type: this.state.processNum, memory: memsize});\r\n                break;\r\n            }\r\n        }\r\n        this.setState({data: tmp, processNum: this.state.processNum+1, lastFit: i});\r\n        this.cleanRam();\r\n    }\r\n\r\n    addBestFit(){\r\n        let tmp = this.state.data, memsize = this.state.memsize;\r\n        if(memsize <= 0)\r\n            return;\r\n        let putIndex = -1, putSize = Infinity;\r\n        for(let i = 0; i < tmp.length; i++){\r\n            if(tmp[i].type === 0 && tmp[i].memory >= memsize && tmp[i].memory < putSize){\r\n                putIndex = i;\r\n                putSize = tmp[i].memory;\r\n            }\r\n        }\r\n        if(putIndex === -1)\r\n            return;\r\n        tmp[putIndex].memory -= memsize;\r\n        tmp.splice(putIndex, 0, {type: this.state.processNum, memory: memsize});\r\n        this.setState({data: tmp, processNum: this.state.processNum+1, lastFit: putIndex});\r\n        this.cleanRam();\r\n    }\r\n    addWorstFit(){\r\n    let tmp = this.state.data, memsize = this.state.memsize;\r\n        if(memsize <= 0)\r\n            return;\r\n        let putIndex = -1, putSize = 0;\r\n        for(let i = 0; i < tmp.length; i++){\r\n            if(tmp[i].type === 0 && tmp[i].memory >= memsize && tmp[i].memory > putSize){\r\n                putIndex = i;\r\n                putSize = tmp[i].memory;\r\n            }\r\n        }\r\n        if(putIndex === -1)\r\n            return;\r\n        tmp[putIndex].memory -= memsize;\r\n        tmp.splice(putIndex, 0, {type: this.state.processNum, memory: memsize});\r\n        this.setState({data: tmp, processNum: this.state.processNum+1, lastFit:putIndex});\r\n        this.cleanRam();\r\n    }\r\n\r\n    addNextFit(){\r\n        let tmp = this.state.data, memsize = this.state.memsize;\r\n        if(memsize <= 0)\r\n            return;\r\n        for(var i = (this.state.lastFit + 1) % tmp.length; i !== this.state.lastFit; i = (i + 1) % tmp.length){\r\n            if(tmp[i].type === 0 && tmp[i].memory >= memsize){\r\n                tmp[i].memory -= memsize;\r\n                tmp.splice(i, 0, {type: this.state.processNum, memory: memsize});\r\n                break;\r\n            }\r\n        }\r\n        this.setState({data: tmp, processNum: this.state.processNum+1, lastFit: i});\r\n        this.cleanRam();\r\n    }\r\n\r\n    finishProcess(){\r\n        let endProcess = this.state.endProcess, tmp = this.state.data;\r\n        if(endProcess <= 0)\r\n            return;\r\n        for(let i = 0; i < tmp.length; i++){\r\n            if(tmp[i].type === endProcess)\r\n                tmp[i].type = 0;\r\n        }\r\n        this.setState({data: tmp});\r\n        this.cleanRam();\r\n    }\r\n\r\n    cleanRam(){\r\n        let tmp = this.state.data;\r\n        for(let i = 0; i < tmp.length-1; i++){\r\n            if(tmp[i].memory === 0){\r\n                tmp.splice(i, 1);\r\n                i--;\r\n                continue;\r\n            }\r\n            if(tmp[i].type === 0 && tmp[i+1].type === 0){\r\n                tmp[i].memory += tmp[i+1].memory;\r\n                tmp.splice(i+1, 1);\r\n                i--;\r\n                continue;\r\n            }\r\n        }\r\n        if(tmp[tmp.length - 1].memory === 0)\r\n            tmp.splice(tmp.length - 1, 1);\r\n        this.setState({data: tmp});\r\n        console.log(this.state.data);\r\n    }\r\n    \r\n    renderControlPanel(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    Process Size: <input type=\"number\" onChange={this.handleChange} value={this.state.memsize} /> <br/>\r\n                    <button onClick={this.addFirstFit}>First Fit</button>\r\n                    <button onClick={this.addBestFit}>Best Fit</button>\r\n                    <button onClick={this.addWorstFit}>Worst Fit</button>\r\n                    <button onClick={this.addNextFit}>Next Fit</button>\r\n                </div>\r\n                <div>\r\n                    <select value={this.state.endProcess} onChange={this.handleSelectChange}>\r\n                        <option value={-1}>please select process</option>\r\n                        {\r\n                            this.state.data.filter(item => item.type > 0).map((item, index) => (\r\n                                <option key={index} value={item.type}>Process {item.type}</option>\r\n                                ))\r\n                        }\r\n                    </select>\r\n                    <button onClick={this.finishProcess} >Has Been Finished</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n        <div style={{width: \"100%\", borderColor:\"black\", borderStyle:\"solid\", borderWidth: \"5px\", padding:\"20px\", margin:\"20px\"}} >\r\n            {this.renderControlPanel()}\r\n            <XYPlot\r\n                stackBy=\"x\"\r\n                xDomain={[0, this.props.memory]}\r\n                yDomain={[0, 10]}\r\n                height={120}\r\n                width={800}\r\n            >\r\n                <VerticalGridLines />\r\n                <XAxis />\r\n                {\r\n                    this.state.data.map((item, index) =>(    \r\n                            <HorizontalBarSeries\r\n                                onValueMouseOver={(point, event)=>{\r\n                                    this.setState({label: point.extra})\r\n                                }}\r\n                                key={index}\r\n                                color={item.type? pallete[item.type % pallete.length] : \"#f2f2f2\"}\r\n                                cluster=\"ram\"\r\n                                data={[{x: item.memory, y: 5, extra: item}]}\r\n                            />\r\n                    ))\r\n                }   \r\n            </XYPlot>\r\n            <div>\r\n                {this.state.label.type ? \"process \" + this.state.label.type : \"free space\"} : {this.state.label.memory}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Ram;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Ram from './Ram';\nclass App extends Component {\n  constructor(){\n      super();\n      this.state = {\n        memorySize: 0,\n        memoryField: 1024,\n      }\n      this.handleChange = this.handleChange.bind(this);\n      this.createRam = this.createRam.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      memoryField: parseInt(target.value)\n    });\n  }   \n\n  createRam(){\n      this.setState({\n        memorySize: this.state.memoryField\n      });\n  }\n\n  render() {\n    return (\n      <div style={{width: \"800px\", height:\"100%\", margin:\"auto\", marginTop:\"120px\"}} className=\"App\">\n      <input type=\"number\" value={this.state.memoryField} onChange={this.handleChange} />\n      <button onClick={this.createRam}>Create Ram</button>\n          { !!this.state.memorySize && <Ram key={this.state.memorySize} memory={this.state.memorySize} />}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}